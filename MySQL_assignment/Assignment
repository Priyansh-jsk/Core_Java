------------------------------------------------------------
TABLE-1-- Salespeople
------------------------------------------------------------
Create database mysql_assignment.
mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| mysql_assignment   |
| performance_schema |
| sakila             |
| sys                |
| world              |
+--------------------+

mysql> use mysql_assignment;
Database changed

mysql> show tables;
+----------------------------+
| Tables_in_mysql_assignment |
+----------------------------+
| salespeople                |
+----------------------------+

mysql> create table Salespeople(SNUM int(11) primary key, SNAME varchar(50) not null, CITY varchar(15), COMM int(15));
Query OK,

> Describe Salespeople table:
mysql> desc Salespeople;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| SNUM  | int         | NO   | PRI | NULL    |       |
| SNAME | varchar(50) | NO   |     | NULL    |       |
| CITY  | varchar(15) | YES  |     | NULL    |       |
| COMM  | int         | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+

> select all data in table
mysql> select * from salespeople;
+------+---------+-----------+------+
| SNUM | SNAME   | CITY      | COMM |
+------+---------+-----------+------+
| 1001 | Peel    | London    |   12 |
| 1002 | Serres  | SanJose   |   13 |
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | Rifkin  | Barcelona |   15 |
| 1008 | Fran    | London    |   25 |
+------+---------+-----------+------+

-------------------------------------------------------
TABLE-2 Customers
-------------------------------------------------------

mysql> create table Customers(CNUM int(11), CNAME varchar(20) not null, CITY varchar(15), RATING int(15), SNUM varchar(15));
Query OK, 

mysql> ALTER TABLE customers ADD PRIMARY KEY(CNUM);
Query OK, 

mysql> ALTER TABLE customers ADD FOREIGN KEY(SNUM) REFERENCES Salespeople(SNUM);
Query OK, 

> Describe Customers table:
mysql> desc customers;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| CNUM   | int         | NO   | PRI | NULL    |       |
| CNAME  | varchar(20) | NO   |     | NULL    |       |
| CITY   | varchar(15) | YES  |     | NULL    |       |
| RATING | int         | YES  |     | NULL    |       |
| SNUM   | int         | YES  | MUL | NULL    |       |
+--------+-------------+------+-----+---------+-------+

mysql> show tables;
+----------------------------+
| Tables_in_mysql_assignment |
+----------------------------+
| customers                  |
| salespeople                |
+----------------------------+

mysql> insert into customers values(2001, "Hoffman", "London", 100, 1001),(2002, "Giovanni", "Rome", 200, 1003),(2003, "Liu", "SanJose", 200, 1002),(2004, "Grass", "Berlin", 300, 1002),(2006, "Clemens", "London", 100, 1001),(2008, "Cisneros", "SanJose", 300, 1007),(2007, "Pereira", "Rome", 100, 1004);
Query OK,

mysql> select * from Customers;
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2001 | Hoffman  | London  |    100 | 1001 |
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | SanJose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2006 | Clemens  | London  |    100 | 1001 |
| 2007 | Pereira  | Rome    |    100 | 1004 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+

--------------------------------------------------------------------------
TABLE-3-- Orders
--------------------------------------------------------------------------
mysql> create table Orders(ONUM int(11) primary key, AMT float(20), ODATE varchar(15), CNUM int(15), SNUM int(15));
Query OK, 

mysql> show tables;
+----------------------------+
| Tables_in_mysql_assignment |
+----------------------------+
| customers                  |
| orders                     |
| salespeople                |
+----------------------------+

mysql> ALTER TABLE Orders ADD foreign key(CNUM) REFERENCES Customers(CNUM);
Query OK, 
mysql> Alter table Orders ADD constraint foreign key(SNUM) REFERENCES Salespeople(SNUM);
Query OK, 

> Describe Orders table:
mysql> desc orders;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| ONUM  | int         | NO   | PRI | NULL    |       |
| AMT   | float       | YES  |     | NULL    |       |
| ODATE | varchar(15) | YES  |     | NULL    |       |
| CNUM  | int         | YES  | MUL | NULL    |       |
| SNUM  | int         | YES  | MUL | NULL    |       |
+-------+-------------+------+-----+---------+-------+

mysql> insert into Orders values(3001, '18.69', '1990-10-03', 2008, 1007),(3003, '767.19', '1990-10-03', 2001, 1001),(3002, '1900.10', '1900-10-03', 2007, 1004),(3005, '5160.45', '1990-10-03', 2003, 1002),(3006, '1098.16', '1990-10-03', 2008, 1007),(3009, '1713.23', '1990-10-04', 2002, 1003), (3007, '75.75', '1990-10-04', 2004,1002), (3008, '4723.00', '1990-10-05', 2006, 1001), (3010, '1309.95', '1990-10-06', 2004, 1002), (3011, '9891.88', '1990-10-06', 2006, 1001);
Query OK, 

mysql> SELECT * FROM Orders;
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1990-10-03 | 2008 | 1007 |
| 3002 |  1900.1 | 1990-10-03 | 2007 | 1004 |
| 3003 |  767.19 | 1990-10-03 | 2001 | 1001 |
| 3005 | 5160.45 | 1990-10-03 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-10-03 | 2008 | 1007 |
| 3007 |   75.75 | 1990-10-04 | 2004 | 1002 |
| 3008 |    4723 | 1990-10-05 | 2006 | 1001 |
| 3009 | 1713.23 | 1990-10-04 | 2002 | 1003 |
| 3010 | 1309.95 | 1990-10-06 | 2004 | 1002 |
| 3011 | 9891.88 | 1990-10-06 | 2006 | 1001 |
+------+---------+------------+------+------+

----------------------------------------------------------------------------------
𝑺𝒐𝒍𝒗𝒆 𝑭𝒐𝒍𝒍𝒐𝒘𝒊𝒏𝒈 𝑸𝒖𝒆𝒓𝒊𝒆𝒔-

1.List all the columns of the Salespeople table
mysql> SELECT * FROM Salespeople;
+------+---------+-----------+------+
| SNUM | SNAME   | CITY      | COMM |
+------+---------+-----------+------+
| 1001 | Peel    | London    |   12 |
| 1002 | Serres  | SanJose   |   13 |
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | Rifkin  | Barcelona |   15 |
| 1008 | Fran    | London    |   25 |
+------+---------+-----------+------+

2.List all customers with a rating of 100.
mysql> SELECT * FROM Customers 
    -> WHERE RATING = 100;
+------+---------+--------+--------+------+
| CNUM | CNAME   | CITY   | RATING | SNUM |
+------+---------+--------+--------+------+
| 2001 | Hoffman | London |    100 | 1001 |
| 2006 | Clemens | London |    100 | 1001 |
| 2007 | Pereira | Rome   |    100 | 1004 |
+------+---------+--------+--------+------+

3.Find the largest order taken by each salesperson on each date.
mysql> SELECT MAX(AMT), ODATE, SNUM FROM Orders ;
+----------+------------+------+
| MAX(AMT) | ODATE      | SNUM |
+----------+------------+------+
|  9891.88 | 1990-10-03 | 1007 |
+----------+------------+------+

4.Arrange the Order table by descending customer number.
mysql> SELECT * FROM Orders
    -> ORDER BY CNUM desc;
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1990-10-03 | 2008 | 1007 |
| 3006 | 1098.16 | 1990-10-03 | 2008 | 1007 |
| 3002 |  1900.1 | 1990-10-03 | 2007 | 1004 |
| 3008 |    4723 | 1990-10-05 | 2006 | 1001 |
| 3011 | 9891.88 | 1990-10-06 | 2006 | 1001 |
| 3007 |   75.75 | 1990-10-04 | 2004 | 1002 |
| 3010 | 1309.95 | 1990-10-06 | 2004 | 1002 |
| 3005 | 5160.45 | 1990-10-03 | 2003 | 1002 |
| 3009 | 1713.23 | 1990-10-04 | 2002 | 1003 |
| 3003 |  767.19 | 1990-10-03 | 2001 | 1001 |
+------+---------+------------+------+------+

5.Find which salespeople currently have orders in the order table.
mysql> SELECT SNAME FROM  Salespeople 
    -> WHERE SNUM IN(SELECT SNUM FROM Orders);
+---------+
| SNAME   |
+---------+
| Peel    |
| Serres  |
| AxelRod |
| Motika  |
| Rifkin  |
+---------+

6.List names of all customers matched with the salespeople serving them.
mysql> SELECT CNAME FROM Customers WHERE
    -> SNUM IN(SELECT SNUM FROM Salespeople);
+----------+
| CNAME    |
+----------+
| Hoffman  |
| Giovanni |
| Liu      |
| Grass    |
| Clemens  |
| Pereira  |
| Cisneros |
+----------+

7.Find the names and numbers of all salespeople who have more than one customer.

8.Count the orders of each of the salespeople and output the results in descending order.

9.List the customer table if and only if one or more of the customers in the Customer table are located in SanJose

10.Match salespeople to customers according to what city they live in.
mysql> SELECT SNAME,CNAME FROM Salespeople SNAME,Customers CNAME 
    -> WHERE SNAME.CITY = CNAME.CITY;
+--------+----------+
| SNAME  | CNAME    |
+--------+----------+
| Fran   | Hoffman  |
| Motika | Hoffman  |
| Peel   | Hoffman  |
| Serres | Liu      |
| Fran   | Clemens  |
| Motika | Clemens  |
| Peel   | Clemens  |
| Serres | Cisneros |
+--------+----------+

11.Find all the customers in SanJose who have a rating above 200.
mysql> SELECT * FROM Customers
    -> WHERE(CITY='SanJose' AND RATING > 200);
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2008 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+

12.List the names and commissions of all salespeople in London.
mysql> SELECT DISTINCT SNAME,COMM,CITY
    -> FROM Salespeople 
    -> WHERE CITY='London';
+--------+------+--------+
| SNAME  | COMM | CITY   |
+--------+------+--------+
| Peel   |   12 | London |
| Motika |   11 | London |
| Fran   |   25 | London |
+--------+------+--------+

13. List all the orders of Salesperson Motika from the orders table.
mysql> SELECT O.ONUM,O.ODATE,O.AMT FROM
    -> Orders O, Salespeople S WHERE
    -> O.SNUM=S.SNUM AND
    -> SNAME='Motika';
+------+------------+--------+
| ONUM | ODATE      | AMT    |
+------+------------+--------+
| 3002 | 1990-10-03 | 1900.1 |
+------+------------+--------+

14.Find all customers who booked orders on October 3.
mysql> SELECT * FROM Orders
    -> WHERE ODATE='1990-10-03';
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1990-10-03 | 2008 | 1007 |
| 3002 |  1900.1 | 1990-10-03 | 2007 | 1004 |
| 3003 |  767.19 | 1990-10-03 | 2001 | 1001 |
| 3005 | 5160.45 | 1990-10-03 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-10-03 | 2008 | 1007 |
+------+---------+------------+------+------+

15.Give the sums of the amounts from the Orders table, grouped by date, eliminating all those dates where the SUM was not at least 2000 above
the maximum Amount.
mysql> SELECT ODATE, sum(AMT) FROM Orders
    -> GROUP BY ODATE;
+------------+--------------------+
| ODATE      | sum(AMT)           |
+------------+--------------------+
| 1990-10-03 |  8944.590208053589 |
| 1990-10-04 |   1788.97998046875 |
| 1990-10-05 |               4723 |
| 1990-10-06 | 11201.829833984375 |
+------------+--------------------+

16.Select all orders that had amounts that were greater than at least one of the orders from October 6.
mysql> SELECT * FROM Orders WHERE AMT >
    -> (SELECT min(AMT) FROM Orders WHERE ODATE='1990-10-04');
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3002 |  1900.1 | 1990-10-03 | 2007 | 1004 |
| 3003 |  767.19 | 1990-10-03 | 2001 | 1001 |
| 3005 | 5160.45 | 1990-10-03 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-10-03 | 2008 | 1007 |
| 3008 |    4723 | 1990-10-05 | 2006 | 1001 |
| 3009 | 1713.23 | 1990-10-04 | 2002 | 1003 |
| 3010 | 1309.95 | 1990-10-06 | 2004 | 1002 |
| 3011 | 9891.88 | 1990-10-06 | 2006 | 1001 |
+------+---------+------------+------+------+

17.Write a query that uses the EXISTS operator to extract all salespeople who have customers with a rating of 300.

18.Find all customers whose cnum is 1000 above the snum of Serres.

19.Give the salespeople’s commissions as percentages instead of decimal numbers.
mysql> SELECT SNAME, COMM*100
    -> AS COMM FROM Salespeople;
+---------+------+
| SNAME   | COMM |
+---------+------+
| Peel    | 1200 |
| Serres  | 1300 |
| AxelRod | 1000 |
| Motika  | 1100 |
| Rifkin  | 1500 |
| Fran    | 2500 |
+---------+------+

20.Find the largest order taken by each salesperson on each date, eliminating those Maximum orders, which are less than 3000.

21.List all the largest orders for October 3, for each salesperson.

22.Find all customers located in cities where Serres has customers.
mysql> SELECT C.CNAME,C.CITY FROM
    -> Customers C, Salespeople S WHERE C.CITY=S.CITY AND
    -> S.SNAME='Serres';
+----------+---------+
| CNAME    | CITY    |
+----------+---------+
| Liu      | SanJose |
| Cisneros | SanJose |
+----------+---------+

23.Select all customers with a rating above 200.
mysql> SELECT * FROM Customers
    -> WHERE RATING > 200;
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+

24.Count the number of salespeople currently having orders in the orders table.

25.Write a query that produces all customers serviced by salespeople with a commission above 12%. Output the customer’s name,
salesperson’s name and the salesperson’s rate of commission.
mysql> SELECT C.CNAME, S.SNAME,S.COMM FROM
    -> Salespeople S, Customers C WHERE
    -> S.SNUM=C.SNUM AND S.COMM>12;
+----------+--------+------+
| CNAME    | SNAME  | COMM |
+----------+--------+------+
| Liu      | Serres |   13 |
| Grass    | Serres |   13 |
| Cisneros | Rifkin |   15 |
+----------+--------+------+

26.Find salespeople who have multiple customers.

27.Find salespeople with customers located in their own cities.

28.Find all salespeople whose name starts with ‘P’ and fourth character is ‘I’.
mysql> SELECT * FROM Salespeople 
    -> WHERE SNAME LIKE 'P__l';
+------+-------+--------+------+
| SNUM | SNAME | CITY   | COMM |
+------+-------+--------+------+
| 1001 | Peel  | London |   12 |
+------+-------+--------+------+

29.Write a query that uses a subquery to obtain all orders for the customer named ‘Cisneros’. Assume you do not know his customer number.

30.Find the largest orders for Serres and Rifkin.

31.Sort the salespeople table in the following order: snum, sname, commission, city.
mysql> SELECT SNUM, SNAME, COMM, CITY
    -> FROM Salespeople;
+------+---------+------+-----------+
| SNUM | SNAME   | COMM | CITY      |
+------+---------+------+-----------+
| 1001 | Peel    |   12 | London    |
| 1002 | Serres  |   13 | SanJose   |
| 1003 | AxelRod |   10 | New York  |
| 1004 | Motika  |   11 | London    |
| 1007 | Rifkin  |   15 | Barcelona |
| 1008 | Fran    |   25 | London    |
+------+---------+------+-----------+

32.Select all customers whose names fall in between ‘A’ and ‘G’ alphabetical range.
mysql> SELECT CNAME FROM Customers
    -> WHERE CNAME BETWEEN 'A' AND 'G' ORDER BY CNAME;
+----------+
| CNAME    |
+----------+
| Cisneros |
| Clemens  |
+----------+

33.Select all the possible combinations of customers you can assign.
mysql> SELECT c.CNAME, s.SNAME FROM Customers c,
    -> Salespeople s WHERE c.SNUM=s.SNUM;
+----------+---------+
| CNAME    | SNAME   |
+----------+---------+
| Hoffman  | Peel    |
| Giovanni | AxelRod |
| Liu      | Serres  |
| Grass    | Serres  |
| Clemens  | Peel    |
| Pereira  | Motika  |
| Cisneros | Rifkin  |
+----------+---------+

34.Select all orders that are greater than the average for October 4.
mysql> SELECT * FROM Orders WHERE
    -> AMT>(SELECT avg(AMT) FROM Orders WHERE ODATE='1990-10-04');
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3002 |  1900.1 | 1990-10-03 | 2007 | 1004 |
| 3005 | 5160.45 | 1990-10-03 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-10-03 | 2008 | 1007 |
| 3008 |    4723 | 1990-10-05 | 2006 | 1001 |
| 3009 | 1713.23 | 1990-10-04 | 2002 | 1003 |
| 3010 | 1309.95 | 1990-10-06 | 2004 | 1002 |
| 3011 | 9891.88 | 1990-10-06 | 2006 | 1001 |
+------+---------+------------+------+------+

35.Write a select command using correlated subquery that selects the names and numbers of all customers with ratings equal to the maximum
for their city.

36.Write a query that totals the orders for each day and places the results in descending order.

37.Write a select command that produces the rating followed by the name of each customer in SanJose.
mysql> SELECT C.CNAME,C.RATING FROM
    -> Customers C, Salespeople S WHERE
    -> S.SNUM=C.SNUM AND S.CITY='SanJose';
+-------+--------+
| CNAME | RATING |
+-------+--------+
| Liu   |    200 |
| Grass |    300 |
+-------+--------+

38.Find all orders with amounts smaller than any amount for a customer in SanJose.


39.Find all orders with above average amounts for their customers.
mysql> SELECT ONUM,AMT FROM Orders WHERE AMT >
    -> (SELECT avg(AMT) FROM Orders);
+------+---------+
| ONUM | AMT     |
+------+---------+
| 3005 | 5160.45 |
| 3008 |    4723 |
| 3011 | 9891.88 |
+------+---------+

40. Write a query that selects the highest rating in each city.
mysql> SELECT CITY,MAX(RATING) AS RATING
    -> FROM Customers GROUP BY CITY;
+---------+--------+
| CITY    | RATING |
+---------+-------
| London  |    100 |
| Rome    |    200 |
| SanJose |    300 |
| Berlin  |    300 |
+---------+--------+

41.Write a query that calculates the amount of the salesperson’s commission on each order by a customer with a rating above 100.00.

42.Count the customers with ratings above SanJose’s average

43.Find all salespeople that are located in either Barcelona or London
mysql> SELECT * FROM Salespeople
    -> WHERE CITY IN('London','Barcelona');
+------+--------+-----------+------+
| SNUM | SNAME  | CITY      | COMM |
+------+--------+-----------+------+
| 1001 | Peel   | London    |   12 |
| 1004 | Motika | London    |   11 |
| 1007 | Rifkin | Barcelona |   15 |
| 1008 | Fran   | London    |   25 |
+------+--------+-----------+------+

44.Find all salespeople with only one customer.
mysql> SELECT SNUM FROM Customers
    -> GROUP BY SNUM HAVING COUNT(*)=1;
+------+
| SNUM |
+------+
| 1003 |
| 1004 |
| 1007 |
+------+

45.Write a query that joins the Customer table to itself to find all pairs or customers served by a single salesperson.

46.Write a query that will give you all orders for more than $1000.00.
mysql> SELECT * FROM Orders
    -> WHERE AMT>1000;
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3002 |  1900.1 | 1990-10-03 | 2007 | 1004 |
| 3005 | 5160.45 | 1990-10-03 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-10-03 | 2008 | 1007 |
| 3008 |    4723 | 1990-10-05 | 2006 | 1001 |
| 3009 | 1713.23 | 1990-10-04 | 2002 | 1003 |
| 3010 | 1309.95 | 1990-10-06 | 2004 | 1002 |
| 3011 | 9891.88 | 1990-10-06 | 2006 | 1001 |
+------+---------+------------+------+------+

47.Write a query that lists each order number followed by the name of the customer who made that order.
mysql> SELECT O.ONUM, C.CNAME FROM Orders O, Customers C WHERE
    -> C.CNUM=O.CNUM;
+------+----------+
| ONUM | CNAME    |
+------+----------+
| 3003 | Hoffman  |
| 3009 | Giovanni |
| 3005 | Liu      |
| 3007 | Grass    |
| 3010 | Grass    |
| 3008 | Clemens  |
| 3011 | Clemens  |
| 3002 | Pereira  |
| 3001 | Cisneros |
| 3006 | Cisneros |
+------+----------+

48. Write a query that selects all the customers whose ratings are equal to or greater than ANY(in the SQL sense) of ‘Serres’.

49.Write two queries that will produce all orders taken on October 3 or October 4.
mysql> SELECT * FROM Orders
    -> WHERE ODATE='1990-10-03' OR
    -> ODATE='1990-10-04';
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1990-10-03 | 2008 | 1007 |
| 3002 |  1900.1 | 1990-10-03 | 2007 | 1004 |
| 3003 |  767.19 | 1990-10-03 | 2001 | 1001 |
| 3005 | 5160.45 | 1990-10-03 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-10-03 | 2008 | 1007 |
| 3007 |   75.75 | 1990-10-04 | 2004 | 1002 |
| 3009 | 1713.23 | 1990-10-04 | 2002 | 1003 |
+------+---------+------------+------+------+

50.Find only those customers whose ratings are higher than every customer in Rome.
mysql> SELECT CNAME FROM Customers
    -> WHERE RATING > (SELECT MAX(RATING)
    -> FROM Customers WHERE CITY='Rome');
+----------+
| CNAME    |
+----------+
| Grass    |
| Cisneros |
+----------+

51.Write a query on the Customers table whose output will exclude all customers with a rating<= 100.00, unless they are located in Rome.
mysql> SELECT * FROM Customers
    -> WHERE(RATING <= 100 AND CITY='Rome')
    -> OR RATING > 100;
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | SanJose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2007 | Pereira  | Rome    |    100 | 1004 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+

52.Find all rows from the customer’s table for which the salesperson number is 1001.
mysql> SELECT * FROM Customers Salespeople
    -> WHERE SNUM= 1001;
+------+---------+--------+--------+------+
| CNUM | CNAME   | CITY   | RATING | SNUM |
+------+---------+--------+--------+------+
| 2001 | Hoffman | London |    100 | 1001 |
| 2006 | Clemens | London |    100 | 1001 |
+------+---------+--------+--------+------+

53.Find the total amount in orders for each salesperson where their total of amounts are greater than the amount of the largest order in the table.

54.Write a query that selects all orders save those with zeroes or NULL in the amount file.
mysql> SELECT * FROM Orders 
    -> WHERE AMT = NULL;
Empty set (0.00 sec)

55.Produce all combinations of salespeople and customer names such that the former precedes the latter alphabetically, and the latter has a
rating of less than 200.
mysql> SELECT S.SNAME, C.CNAME, C.RATING FROM
    -> Salespeople S, Customers C WHERE
    -> C.SNUM=S.SNUM AND C.RATING>200;
+--------+----------+--------+
| SNAME  | CNAME    | RATING |
+--------+----------+--------+
| Serres | Grass    |    300 |
| Rifkin | Cisneros |    300 |
+--------+----------+--------+

56.Find all salespeople name and commission.
mysql> SELECT SNAME, COMM
    -> FROM Salespeople;
+---------+------+
| SNAME   | COMM |
+---------+------+
| Peel    |   12 |
| Serres  |   13 |
| AxelRod |   10 |
| Motika  |   11 |
| Rifkin  |   15 |
| Fran    |   25 |
+---------+------+

57.Write a query that produces the names and cities of all customers with the same rating as Hoffman. Write the query using Hoffman’s cnum
rather than his rating, so that it would still be usable if his rating is changed.

58.Find all salespeople for whom there are customers that follow them in alphabetical order.

59.Write a query that produces the names and ratings of all customers who have average orders.
mysql> SELECT CNAME,RATING FROM Customers
    -> WHERE RATING> (SELECT avg(RATING) FROM Customers);
+----------+--------+
| CNAME    | RATING |
+----------+--------+
| Giovanni |    200 |
| Liu      |    200 |
| Grass    |    300 |
| Cisneros |    300 |
+----------+--------+

60.Find the SUM of all Amounts from the orders table.
mysql> SELECT sum(AMT) AS
    -> Total_Amount FROM Orders;
+--------------------+
| Total_Amount       |
+--------------------+
| 26658.400022506714 |
+--------------------+

61.Write a SELECT command that produces the order number, amount, and the date from rows in the order table.
mysql> SELECT ONUM,AMT,ODATE
    -> FROM Orders;
+------+---------+------------+
| ONUM | AMT     | ODATE      |
+------+---------+------------+
| 3001 |   18.69 | 1990-10-03 |
| 3002 |  1900.1 | 1990-10-03 |
| 3003 |  767.19 | 1990-10-03 |
| 3005 | 5160.45 | 1990-10-03 |
| 3006 | 1098.16 | 1990-10-03 |
| 3007 |   75.75 | 1990-10-04 |
| 3008 |    4723 | 1990-10-05 |
| 3009 | 1713.23 | 1990-10-04 |
| 3010 | 1309.95 | 1990-10-06 |
| 3011 | 9891.88 | 1990-10-06 |
+------+---------+------------+

62.Count the number of non NULL rating fields in the Customers table (including repeats).
mysql> SELECT COUNT(RATING IS NOT NULL) AS COUNT FROM Customers
    -> ;
+-------+
| COUNT |
+-------+
|     7 |
+-------+

63.Write a query that gives the names of both the salesperson and the customer for each order after the order number.

64.List the commissions of all salespeople servicing customers in London.
mysql> SELECT * FROM Salespeople
    -> WHERE CITY='London';
+------+--------+--------+------+
| SNUM | SNAME  | CITY   | COMM |
+------+--------+--------+------+
| 1001 | Peel   | London |   12 |
| 1004 | Motika | London |   11 |
| 1008 | Fran   | London |   25 |
+------+--------+--------+------+

65.Write a query using ANY or ALL that will find all salespeople who have no customers located in their city.
mysql> SELECT S.SNAME,S.CITY, C.CNAME,C.CITY AS C_CITY
    -> FROM Salespeople S, Customers C WHERE
    -> S.SNUM=C.SNUM AND S.CITY!=C.CITY;
+---------+-----------+----------+---------+
| SNAME   | CITY      | CNAME    | C_CITY  |
+---------+-----------+----------+---------+
| AxelRod | New York  | Giovanni | Rome    |
| Serres  | SanJose   | Grass    | Berlin  |
| Motika  | London    | Pereira  | Rome    |
| Rifkin  | Barcelona | Cisneros | SanJose |
+---------+-----------+----------+---------+

66.Write a query using the EXISTS operator that selects all salespeople with customers located in their cities who are not assigned to them.

67.Write a query that selects all customers serviced by Peel or Motika. (Hint: The snum field relates the 2 tables to one another.)
mysql> SELECT C.CNAME FROM Customers C, Salespeople S
    -> WHERE C.SNUM=S.SNUM AND
    -> (S.SNAME='Motika' OR S.SNAME='Peel');
+---------+
| CNAME   |
+---------+
| Hoffman |
| Clemens |
| Pereira |
+---------+

68.Count the number of salespeople registering orders for each day. (If a salesperson has more than one order on a given day, he or she should
be counted only once.)
mysql> SELECT ODATE,count(DISTINCT SNUM) FROM
    -> Orders GROUP BY ODATE;
+------------+----------------------+
| ODATE      | count(DISTINCT SNUM) |
+------------+----------------------+
| 1990-10-03 |                    4 |
| 1990-10-04 |                    2 |
| 1990-10-05 |                    1 |
| 1990-10-06 |                    2 |
+------------+----------------------+

69.Find all orders attributed to salespeople who live in London.
mysql> SELECT * FROM Orders O, Salespeople S WHERE
    -> O.SNUM=S.SNUM AND S.CITY='London';
+------+---------+------------+------+------+------+--------+--------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM | SNUM | SNAME  | CITY   | COMM |
+------+---------+------------+------+------+------+--------+--------+------+
| 3003 |  767.19 | 1990-10-03 | 2001 | 1001 | 1001 | Peel   | London |   12 |
| 3008 |    4723 | 1990-10-05 | 2006 | 1001 | 1001 | Peel   | London |   12 |
| 3011 | 9891.88 | 1990-10-06 | 2006 | 1001 | 1001 | Peel   | London |   12 |
| 3002 |  1900.1 | 1990-10-03 | 2007 | 1004 | 1004 | Motika | London |   11 |
+------+---------+------------+------+------+------+--------+--------+------+

70.Find all orders by customers not located in the same cities as their salespeople.

71.Find all salespeople who have customers with more than one current order.
mysql> SELECT DISTINCT SNUM FROM Orders
    ->  WHERE CNUM IN(SELECT CNUM FROM Orders GROUP BY CNUM HAVING count(CNUM)>1);
+------+
| SNUM |
+------+
| 1001 |
| 1002 |
| 1007 |
+------+

72.Write a query that extracts from the customer’s table every customer assigned to a salesperson, who is currently having at least one another
customer(besides the customer being selected) with orders in the Orders Table.

73.Write a query on the customer’s table that will find the highest rating in each city. Put the output in this form: for the city (city), the highest
rating is (rating).
mysql> SELECT CITY,max(RATING) AS
    -> High_RATING FROM Customers GROUP BY CITY;
+---------+-------------+
| CITY    | High_RATING |
+---------+-------------+
| London  |         100 |
| Rome    |         200 |
| SanJose |         300 |
| Berlin  |         300 |
+---------+-------------+

74.Write a query that will produce the snum values of all salespeople with orders, having amt greater than 1000 in the Orders Table(without
repeats).
mysql> SELECT DISTINCT S.SNUM,O.AMT FROM
    -> Orders O, Salespeople S WHERE
    -> O.SNUM=S.SNUM AND O.AMT>1000;
+------+---------+
| SNUM | AMT     |
+------+---------+
| 1004 |  1900.1 |
| 1002 | 5160.45 |
| 1007 | 1098.16 |
| 1001 |    4723 |
| 1003 | 1713.23 |
| 1002 | 1309.95 |
| 1001 | 9891.88 |
+------+---------+

75.Write a query that lists customers in a descending order of rating. Output the rating field first, followed by the customer’s names and numbers.
mysql> SELECT RATING, CNAME, CNUM FROM
    -> Customers ORDER BY RATING Desc;
+--------+----------+------+
| RATING | CNAME    | CNUM |
+--------+----------+------+
|    300 | Grass    | 2004 |
|    300 | Cisneros | 2008 |
|    200 | Giovanni | 2002 |
|    200 | Liu      | 2003 |
|    100 | Hoffman  | 2001 |
|    100 | Clemens  | 2006 |
|    100 | Pereira  | 2007 |
+--------+----------+------+

76.Find the average commission for salespeople in London.
mysql> SELECT CITY,avg(COMM) FROM
    -> Salespeople WHERE CITY='London';
+--------+-----------+
| CITY   | avg(COMM) |
+--------+-----------+
| London |   16.0000 |
+--------+-----------+

77.Find all orders credited to the same salesperson who services Hoffman.(cnum 2001).
mysql> SELECT * FROM Orders O,Customers C
    -> WHERE O.SNUM = C.SNUM AND C.CNUM=2001;
+------+---------+------------+------+------+------+---------+--------+--------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM | CNUM | CNAME   | CITY   | RATING | SNUM |
+------+---------+------------+------+------+------+---------+--------+--------+------+
| 3003 |  767.19 | 1990-10-03 | 2001 | 1001 | 2001 | Hoffman | London |    100 | 1001 |
| 3008 |    4723 | 1990-10-05 | 2006 | 1001 | 2001 | Hoffman | London |    100 | 1001 |
| 3011 | 9891.88 | 1990-10-06 | 2006 | 1001 | 2001 | Hoffman | London |    100 | 1001 |
+------+---------+------------+------+------+------+---------+--------+--------+------+

78.Find all salespeople whose commission is in between 0.10 and 0.12(both inclusive).
mysql> SELECT SNAME FROM Salespeople
    -> WHERE(COMM>=10 AND COMM<=12);
+---------+
| SNAME   |
+---------+
| Peel    |
| AxelRod |
| Motika  |
+---------+

79.Write a query that will give you the names and cities of all salespeople in London with a commission above 0.10.
mysql> SELECT SNAME,CITY FROM Salespeople WHERE
    -> CITY='London' AND COMM>0.10;
+--------+--------+
| SNAME  | CITY   |
+--------+--------+
| Peel   | London |
| Motika | London |
| Fran   | London |
+--------+--------+

80.Write a query that selects each customer’s smallest order.
mysql> SELECT CNUM, avg(AMT) AS Amount FROM
    -> Orders GROUP BY CNUM;
+------+--------------------+
| CNUM | Amount             |
+------+--------------------+
| 2001 |  767.1900024414062 |
| 2002 |   1713.22998046875 |
| 2003 |    5160.4501953125 |
| 2004 |  692.8499755859375 |
| 2006 |   7307.43994140625 |
| 2007 | 1900.0999755859375 |
| 2008 |  558.4250173568726 |
+------+--------------------+

81.Write a query that selects the first customer in alphabetical order whose name begins with ‘G’.
mysql> SELECT CNAME FROM Customers
    -> WHERE CNAME LIKE 'G%' LIMIT 1;
+----------+
| CNAME    |
+----------+
| Giovanni |
+----------+

82.Write a query that counts the number of different non NULL city values in the customers table.
mysql> SELECT count(DISTINCT CITY) AS
    -> count_CITY FROM Customers;
+------------+
| count_CITY |
+------------+
|          4 |
+------------+

83.Find the average amount from the Orders Table.
mysql> SELECT avg(AMT) AS
    -> Amount from Orders;
+-------------------+
| Amount            |
+-------------------+
| 2665.840002250671 |
+-------------------+

84.Find all customers who are not located in SanJose and whose rating is above 200.
mysql> SELECT * FROM Customers WHERE
    -> CITY!='SanJose' AND RATING>200;
+------+-------+--------+--------+------+
| CNUM | CNAME | CITY   | RATING | SNUM |
+------+-------+--------+--------+------+
| 2004 | Grass | Berlin |    300 | 1002 |
+------+-------+--------+--------+------+

85.Give a simpler way to write this query.SELECT snum, sname, city, comm FROM salespeople WHERE (comm > + 0.12 OR comm < 0.14);
mysql> SELECT SNUM,SNAME,CITY,COMM FROM
    -> Salespeople WHERE(COMM>+12 OR COMM<14);
+------+---------+-----------+------+
| SNUM | SNAME   | CITY      | COMM |
+------+---------+-----------+------+
| 1001 | Peel    | London    |   12 |
| 1002 | Serres  | SanJose   |   13 |
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | Rifkin  | Barcelona |   15 |
| 1008 | Fran    | London    |   25 |
+------+---------+-----------+------+

86.Which salespersons attend to customers not in the city they have been assigned to?

87.Which salespeople get commission greater than 0.11 are serving customers rated less than 250?
mysql> SELECT SNAME FROM Salespeople WHERE COMM>11
    -> AND SNUM IN(SELECT SNUM FROM Customers WHERE RATING<250);
+--------+
| SNAME  |
+--------+
| Peel   |
| Serres |
+--------+

88.Which salespeople have been assigned to the same city but get different commission percentages?

89.Which salesperson has earned the maximum commission?
mysql> SELECT SNAME,COMM FROM Salespeople WHERE
    -> COMM=(SELECT max(COMM) FROM Salespeople);
+-------+------+
| SNAME | COMM |
+-------+------+
| Fran  |   25 |
+-------+------+

90.Does the customer who has placed the maximum number of orders have the maximum rating?

91.List all customers in descending order of customer rating.
mysql> SELECT * FROM Customers
    -> ORDER BY RATING desc;
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | SanJose |    200 | 1002 |
| 2001 | Hoffman  | London  |    100 | 1001 |
| 2006 | Clemens  | London  |    100 | 1001 |
| 2007 | Pereira  | Rome    |    100 | 1004 |
+------+----------+---------+--------+------+

92.On which days has Hoffman placed orders?
mysql> SELECT C.CNAME,ONUM,ODATE FROM Customers
    -> C, Orders O WHERE C.CNUM=O.CNUM AND C.CNAME='Hoffman';
+---------+------+------------+
| CNAME   | ONUM | ODATE      |
+---------+------+------------+
| Hoffman | 3003 | 1990-10-03 |
+---------+------+------------+

93.Which salesmen have no orders between 10/03/1990 and 10/05/1990?
mysql> SELECT DISTINCT S.SNAME FROM Salespeople s, Orders o WHERE
    -> s.SNUM=o.SNUM AND o.ODATE != 1990-10-03 AND 1990-10-05;
+---------+
| SNAME   |
+---------+
| Rifkin  |
| Motika  |
| Peel    |
| Serres  |
| AxelRod |
+---------+

94.How many salespersons have succeeded in getting orders?	

95.How many customers have placed orders?
mysql> SELECT count(CNUM) AS count FROM Customers WHERE
    -> CNUM IN(SELECT CNUM FROM Orders GROUP BY CNUM);
+-------+
| count |
+-------+
|     7 |
+-------+

96.On which date has each salesman booked an order of maximum value?
mysql> SELECT ONUM, ODATE FROM Orders WHERE AMT
    -> IN(SELECT max(AMT) FROM Orders GROUP BY SNUM);
+------+------------+
| ONUM | ODATE      |
+------+------------+
| 3002 | 1990-10-03 |
| 3005 | 1990-10-03 |
| 3006 | 1990-10-03 |
| 3009 | 1990-10-04 |
| 3011 | 1990-10-06 |
+------+------------+

97.Who is the most successful salesperson?

98.Which customers have the same rating?
mysql> SELECT * FROM Customers ORDER BY RATING;
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2001 | Hoffman  | London  |    100 | 1001 |
| 2006 | Clemens  | London  |    100 | 1001 |
| 2007 | Pereira  | Rome    |    100 | 1004 |
| 2002 | Giovanni | Rome    |    200 | 1003 |
| 2003 | Liu      | SanJose |    200 | 1002 |
| 2004 | Grass    | Berlin  |    300 | 1002 |
| 2008 | Cisneros | SanJose |    300 | 1007 |
+------+----------+---------+--------+------+

99.Find all orders greater than the average for October 4th.

100.List all customers with ratings above Grass’s average.
mysql> SELECT CNAME,RATING FROM Customers WHERE
    -> RATING >= (SELECT avg(RATING) FROM Customers WHERE CNAME='Grass');
+----------+--------+
| CNAME    | RATING |
+----------+--------+
| Grass    |    300 |
| Cisneros |    300 |
+----------+--------+

101.Which customers have above average orders?

102.Select the total amount in orders for each salesperson for which the total is greater than the amount of the largest order in the table.

103.Give names and numbers of all salespersons that have more than one customer?

104.Select all salespeople by name and number who have customers in their city whom they don’t service.

105.Does the total amount in orders by customer in Rome and London, exceed the commission paid to salesperson in London, and New York by
more than 5 times?

106.Which are the date, order number, amt and city for each salesperson (by name) for themaximum order he has obtained?

107.Which salesperson is having lowest commission?
mysql> SELECT SNAME,COMM FROM Salespeople WHERE
    -> COMM=(SELECT min(COMM) FROM Salespeople);
+---------+------+
| SNAME   | COMM |
+---------+------+
| AxelRod |   10 |
+---------+------+
